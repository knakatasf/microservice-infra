name: Deploy QA EC2

on:
  workflow_dispatch:
  repository_dispatch:
    types: [deploy-qa]

jobs:
  deploy-qa:
    runs-on: ubuntu-latest

    env:
      #IMAGE_TAG: ${{ github.event.client_payload.image_tag }}
      IMAGE_TAG: v1.0.0-qa-20250425
      AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region:            us-east-1

      - name: Add SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.QA_PRIVATE_KEY }}" > ~/.ssh/qa-key.pem
          chmod 600 ~/.ssh/qa-key.pem

      - name: Prepare Terraform vars
        run: |
          echo "TF_VAR_public_key<<EOF" >> $GITHUB_ENV
          echo "${{ secrets.QA_PUBLIC_KEY }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Terraform QA EC2
        run: |
          cd qa/terraform
          terraform init -input=false
          terraform apply -auto-approve -input=false

      - name: Capture QA EC2 Public IP
        run: |
          cd qa/terraform
          PUBLIC_IP=$(terraform output -raw qa_ec2_public_ip)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Render Docker Compose for QA
        run: |
          cd qa
          envsubst \
            < docker-compose.qa.yaml.tmpl \
            > docker-compose.qa.yaml

      - name: Wait for QA EC2 to be ready
        run: |
          sleep 15

      - name: Transfer files to QA EC2
        run: |
          cd qa
          scp -i ~/.ssh/qa-key.pem \
            -o StrictHostKeyChecking=no \
            -r nginx \
            docker-compose.qa.yaml \
            ec2-user@${{ env.PUBLIC_IP }}:/home/ec2-user/

      - name: Deploy on QA EC2
        run: |
          ssh -i ~/.ssh/qa-key.pem \
            -o StrictHostKeyChecking=no \
            ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
              set -e
          
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start
              sudo usermod -a -G docker ec2-user
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
          
              export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
              export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
              export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
              export AWS_ECR_URL=${{ secrets.AWS_ECR_URL }}
          
              aws ecr get-login-password --region us-east-1 \
                | sudo docker login --username AWS --password-stdin $AWS_ECR_URL
          
              cd /home/ec2-user
              sudo docker-compose -f docker-compose.qa.yaml pull
              sudo docker-compose -f docker-compose.qa.yaml up -d
            EOF

      - name: Wait for 5 mins
        run: |
          sleep 300

      - name: Terraform Destroy
        run: |
          cd qa/terraform
          terraform init -input=false
          terraform destroy -auto-approve -input=false

      - name: Cleanup QA infra on failure
        if: ${{ failure() }}
        run: |
          echo "One of the previous steps failed â€“ tearing down QA..."
          cd qa/terraform
          terraform destroy -auto-approve