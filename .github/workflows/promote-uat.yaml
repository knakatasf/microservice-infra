name: Promote to UAT

on:
  workflow_dispatch:
    inputs:
      updated_service:
        description: "Which microservice to promote?"
        required: true
        type: choice
        options:
          - frontend
          - catalog
          - customer
          - order
      qa_tag:
        description: "What QA tag of the microservice to promote?"
        required: true

jobs:
  promote:
    runs-on: ubuntu-latest
    env:
      AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}
      EKS_CLUSTER: eks-microservice
      HOSTED_ZONE_NAME: claudio.works

    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Promote to rc tag
        run: |
          aws ecr get-login-password --region us-east-1 \
              | sudo docker login --username AWS --password-stdin $AWS_ECR_URL
          
          # Inputs
          SHORT="${{ github.event.inputs.updated_service }}"   # e.g. "frontend"
          SERVICE="${SHORT}-service"                           # e.g. "frontend-service"
          QA_TAG="${{ github.event.inputs.qa_tag }}"           # e.g. "1.2.0-qa-20250501"

          # Build RC tag
          PREFIX=${QA_TAG%-qa-*}                               # "1.2.0"
          TODAY=$(date +%Y%m%d)                                # e.g. "20250502"
          RC_TAG="${PREFIX}-rc-${TODAY}"                       # "1.2.0-rc-20250502"
          echo "RC_TAG=$RC_TAG" >> $GITHUB_ENV

          echo "Promoting only $SERVICE: $QA_TAG → $RC_TAG"
          docker pull $AWS_ECR_URL/$SERVICE:$QA_TAG
          docker tag  $AWS_ECR_URL/$SERVICE:$QA_TAG \
                      $AWS_ECR_URL/$SERVICE:$RC_TAG
          docker push $AWS_ECR_URL/$SERVICE:$RC_TAG

      - name: Set image tags for UAT deploy
        run: |
          # Uppercase short name for looping
          SHORT="${{ github.event.inputs.updated_service }}"
          UPPER=$(echo "$SHORT" | tr '[:lower:]' '[:upper:]')
          
          # Prepare sanitized tags
          SAN_RC=${RC_TAG//./-}      # e.g. "1-2-0-rc-20250502"
          SAN_LATEST="latest"        # sanitized latest
          
          for svc in FRONTEND CATALOG CUSTOMER ORDER; do
            if [ "$svc" = "$UPPER" ]; then
              TAG="$RC_TAG"
              SERV="$SAN_RC"
            else
              TAG="latest"
              SERV="$SAN_LATEST"
            fi
            echo "${svc}_TAG=$TAG" >> $GITHUB_ENV
            echo "${svc}_SERV=$SERV" >> $GITHUB_ENV
          done

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --region us-east-1 \
            --name ${{ env.EKS_CLUSTER }}

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Add ingress-nginx repo & Install NGINX Ingress Controller
        run: |
          mkdir -p ~/.config/helm/repository
          mkdir -p ~/.cache/helm/repository
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --set controller.service.type=LoadBalancer \
            --wait \
            --timeout=300s

      - name: Reset UAT namespace
        run: |
          # delete if present (don’t fail if it wasn’t there)
          kubectl delete namespace uat --ignore-not-found

          # wait until it’s fully gone (or time out after 2m)
          kubectl wait \
            --for=delete namespace/uat \
            --timeout=120s \
            || echo "Timed out waiting for uat namespace to terminate"

          # (Re)create it with your YAML manifest
          cd k8s
          kubectl apply -f namespaces.yaml

      - name: Deploy microservice workloads
        run: |
          cd k8s
          envsubst '${AWS_ECR_URL} ${FRONTEND_TAG} ${FRONTEND_SERV}' \
            < frontend-deployment.yaml \
            | kubectl apply -n uat -f -

          envsubst '${AWS_ECR_URL} ${CATALOG_TAG} ${CATALOG_SERV}' \
            < catalog-deployment.yaml \
            | kubectl apply -n uat -f -

          envsubst '${AWS_ECR_URL} ${CUSTOMER_TAG} ${CUSTOMER_SERV}' \
            < customer-deployment.yaml \
            | kubectl apply -n uat -f -

          envsubst '${AWS_ECR_URL} ${ORDER_TAG} ${ORDER_SERV} ${CATALOG_SERV} ${CUSTOMER_SERV}' \
            < order-deployment.yaml \
            | kubectl apply -n uat -f -

      - name: Wait for microservice rollouts
        run: |
          for svc in catalog-deployment customer-deployment order-deployment frontend-deployment; do
            kubectl rollout status deployment/$svc --namespace uat --timeout=120s
          done

      - name: Deploy Ingress rules
        run: |
          cd k8s
          envsubst '${FRONTEND_SERV} ${CATALOG_SERV} ${CUSTOMER_SERV} ${ORDER_SERV}' \
            < ingress-uat.yaml \
            | kubectl apply -f -

      - name: Wait for NGINX Controller Pods
        run: |
          kubectl rollout status deployment/ingress-nginx-controller \
            --namespace ingress-nginx --timeout=300s

      - name: Publish uat.claudio.works → ELB in Route 53
        run: |
          LB_DNS=$(kubectl -n ingress-nginx \
            get svc ingress-nginx-controller \
            -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "ELB DNS is $LB_DNS"
          
          ZONE_ID=$(aws route53 list-hosted-zones-by-name \
            --dns-name $HOSTED_ZONE_NAME \
            --query 'HostedZones[0].Id' \
            --output text | sed 's|/hostedzone/||')
          echo "Zone ID is $ZONE_ID"
          
          aws route53 change-resource-record-sets \
            --hosted-zone-id "$ZONE_ID" \
            --change-batch "{
              \"Comment\": \"Automated UAT CNAME record\",
              \"Changes\": [{
                \"Action\": \"UPSERT\",
                \"ResourceRecordSet\": {
                  \"Name\": \"uat.${HOSTED_ZONE_NAME}\",
                  \"Type\": \"CNAME\",
                  \"TTL\": 300,
                  \"ResourceRecords\": [{\"Value\": \"${LB_DNS}\"}]
                }
              }]
            }"
          
          echo "uat.${HOSTED_ZONE_NAME} → ${LB_DNS} (alias in Zone ${ZONE_ID})"