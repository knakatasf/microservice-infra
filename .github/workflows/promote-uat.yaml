name: Promote to UAT

on:
  workflow_dispatch:
    inputs:
      qa_tag:
        description: 'QA image tag to promote to rc tag'
        required: true

jobs:
  promote:
    runs-on: ubuntu-latest
    env:
      AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}
      EKS_CLUSTER: eks-microservice
      RC_TAG: v1.0.0-rc-20250425

    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}

#      - name: Promote to rc tag
#        run: |
#          aws ecr get-login-password --region us-east-1 \
#              | sudo docker login --username AWS --password-stdin $AWS_ECR_URL
#
#          QA_TAG=${{ github.event.inputs.qa_tag }}
#          # swap -qa- → -rc- and update date to today
#          PREFIX=${QA_TAG%-qa-*}
#          TODAY=$(date +%Y%m%d)
#          RC_TAG="${PREFIX}-rc-${TODAY}"
#          echo "Promoting $QA_TAG → $RC_TAG"
#          echo "RC_TAG=$RC_TAG" >> $GITHUB_ENV
#
#          for svc in frontend-service catalog-service customer-service order-service; do
#            sudo docker pull $AWS_ECR_URL/${svc}:${QA_TAG}
#            sudo docker tag  $AWS_ECR_URL/${svc}:${QA_TAG} \
#                        $AWS_ECR_URL/${svc}:${RC_TAG}
#            sudo docker push $AWS_ECR_URL/${svc}:${RC_TAG}
#          done

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --region us-east-1 \
            --name ${{ env.EKS_CLUSTER }}

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Add ingress-nginx repo & Install NGINX Ingress Controller
        run: |
          mkdir -p ~/.config/helm/repository
          mkdir -p ~/.cache/helm/repository
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --set controller.service.type=LoadBalancer \
            --wait \
            --timeout=300s

      - name: Deploy microservice workloads
        run: |
          cd k8s
          kubectl apply -f catalog-deployment.yaml
          kubectl apply -f customer-deployment.yaml
          kubectl apply -f order-deployment.yaml
          kubectl apply -f frontend-deployment.yaml

      - name: Apply rc tag images to k8s files
        run: |
          cd k8s
          kubectl set image deployment/frontend-deployment \
          frontend=${{ env.AWS_ECR_URL }}/frontend-service:${{ env.RC_TAG }}
          kubectl set image deployment/catalog-deployment \
          catalog=${{ env.AWS_ECR_URL }}/catalog-service:${{ env.RC_TAG }}
          kubectl set image deployment/customer-deployment \
          customer=${{ env.AWS_ECR_URL }}/customer-service:${{ env.RC_TAG }}
          kubectl set image deployment/order-deployment \
          order=${{ env.AWS_ECR_URL }}/order-service:${{ env.RC_TAG }}

      - name: Wait for microservice rollouts
        run: |
          for svc in catalog-deployment customer-deployment order-deployment frontend-deployment; do
            kubectl rollout status deployment/$svc --namespace default --timeout=120s
          done

      - name: Deploy Ingress rules
        run: |
          cd k8s
          kubectl apply -f nginx-deployment.yaml
            
      - name: Get Ingress Controller LB DNS
        id: lb_dns
        run: |
          DNS=$(kubectl -n ingress-nginx get svc ingress-nginx-controller \
            -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "LoadBalancer DNS: $DNS"
          # Export it as a step-output for later steps if you need it
          echo "dns_name=$DNS" >> $GITHUB_OUTPUT